* Building a simple browser based spell checking for use with basic text files
This is pretty much the same as CS50 Speller PSET. I've just revised for myself to work on more JS stuff. As an aside I'm trying to learn more about ORG files. So its experementation on top of experementation. This is because I don't really want to learn markdown to much. Only the essentials.
** Goal 1
Using a Node process check a specified file against a dictionary and determine what words are misspelled. Take a count of the total words misspelled. Log to the console all words misspelled, the total words in the document checked, and total number of words misspelled. The total words checked and total words misspelled should be logged to the console last seeing as the list of words may be very long.

Words, specifically, are letters and the apostrophe only. There is no punctuation or numbers in a word. So make sure you are only checking the right things.

** Goal 2
Design a web page that can load in a document, check that text for words misspelled, and identify to the user in some meaningful way what words are misspelled, allow the user to change the word in the document, allow the user to add words to the dictionary so all the same words following in the document are no longer misspelled.

** Goal 3
Design an algorithm which can provide to the user a list of suggestions to replace the misspelled word based on the words available in the dictionary.
Not yet reviewed to identify a list of TODOs

* NOTEs (Stuff I have learned as I proceed through the TODOs
** How I intend to operate on the text to check for spelling
I think a reasonable way to work through this is.
Read through the loaded text file exactly as is from my node version. If the word is found to be misspelled I will need to store the location of the misspelled word in two ways. One way for the raw text file, and one for the innerHTML that will be displayed in the DOM. The innerHTML in the DOM will surround the word with a <span> tag and an ID for that particular misspelled word. The locations will become offset as I continue to add <span>s in the innerHTML which is why I will need to store these as two separate locations. For the moment I think here is what I want the collection of data to look like. This will probably change.

#+BEGIN_SRC Javascript
misspelled_data { 
    add_word: function (word) {
        if (word in Object.keys(this)) {
	    this.word.raw.push(// Data for location);
	    this.word.HTML.push(// Data for location);
        }
    }
}
#+END_SRC

** Loading local file from machine appears to not be possible
I have tried about 5 different ways to force load a local file from the computer. None of which appear to work based on protections provided by the browser.

One way that appears to still be possible is using the <link> preload/prefetch EG
#+BEGIN_SRC HTML
<link rel="preload" href="dictionaries/large" as="fetch" id="dict" onload="loadDict()">
#+END_SRC
This does load the file, but I don't know if it is possible to asscess the file from the <link> element, or frame memory it is loaded into.

Attempted to force load file by HTML <input> element. You can not change the <input>.value to anything other than an empty string using JS though. The browser complains. 

Attempted to force load by using <input> with value set in HTML file, create event, and dispatch. This also does not work though. For good reason.
** Drag and Drop is a bit of a pain
You need to make sure and prevent the default event action from happening. In the case of dragging a file into the browser the default action is to load that file into a new page. The simplest way I found to do this is as follows:

Define element that you have as drop-area based on this html
<input type="file" id="fileElem" multiple accept="media_type/text" onchange="handleFiles(this.files)">
#+BEGIN_SRC js-mode
let dropArea = document.getElementById('drop-area');
#+END_SRC

Remove all EventListeners for this drag/drop element
#+BEGIN_SRC js-mode
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults (e) {
    e.preventDefault();
    e.stopPropagation();
}
#+END_SRC

The funny thing about this above is really you only need to preventDefaults for ['dragover', 'drop']. That ends up working just fine.

** Dropped file creates a dataTransfer object from the DOM event (Hopefully correct terms)
See here for MDN documentation
https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files

*** An interesting note when reading a file as text from FileReader()
+Apparently when you do <FileReader>.readAsText(file) the function thinks it is doing you a favor. I don't know if I like the funcitonality but it essentiall replaces all '\n' characters in the file to <br>. This is probably why it takes awhile to actually load the damn file in.+

I found the above to not be true. <FileReader>.readAsText(file) does what it claims to do. What I found is when you set an element.innerText to this raw text is is the thing that is replacing '\n' with <br>. It does not handle '\t' as far as I have seen. This may not be true.

Using the same as above but with element.innerHTML does not have this effect.
* TODOs to complete this task for myself
** DONE +Create basic spell check algorithm+
Using Node just figure out how to work with files, determine what should and should not be considered a word
Validate the process

** TODO Determine how to load text file into JS variable (the right way?)
Working on this now.
Found a way that works but is not really what I would want. I'll deal with it for now.
** TODO Setup basic browser layout
This will most likely be multi step process. What states (modes) should the UI be in?
*** TODO Setup state for initial page load
How should things look? 
Should I have instructions for user? How hard is it to interpret what to do?
*** TODO Implement loading screen? When user loads large file it can take some time for the browser to parse and present the file.
Need some sort of confirmation that something is actually happening. 
I chose to use the upper left region to help user determine when some action is being performed. 
*** TODO Actual windows state which allows user to do the spell check stuff
More to add here later.
** DONE +Figure out how to load file into memory from user drag/drop or input button (Load File)+
** TODO Read in text file and determine what words are incorrect
I have two options here as far as I see things. The easy option is just to only work on a loaded text file as the browser would display (innerHTML). In this case I would have to ignore the <br> tag as it should not be considered for spell checking. Effectively this is the easy way because I'm not considering the posibility that a user would want to save the text back to disk.

The more difficult way would be to operate on the raw text file, and the innerHTML in tandem. 
